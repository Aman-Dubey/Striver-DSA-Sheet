DAY-9::

#Subset Sums:

void summ(vector<int> &num, vector<int> &ans, int sum, int start, int end) {
    ans.push_back(sum);
    if(start>end) return;  
    for(int i=start;i<=end;i++) {
        sum+=num[i];
        summ(num,ans,sum,i+1,end);
        sum-=num[i];
    }
}

vector<int> subsetSum(vector<int> &num)
{
    vector<int> ans;
    summ(num,ans,0,0,num.size()-1);
    sort(ans.begin(),ans.end());
    return ans;
}

#Subset-II:

class Solution {
public:
    
    void find(set<vector<int>> &s, vector<int> &temp, vector<int> &nums, int start, int end) {
        s.insert(temp);
        if(start>end) return;
        for(int i=start;i<=end;i++) {
            temp.push_back(nums[i]);
            find(s,temp,nums,i+1,end);
            temp.pop_back();
        }
    }
    
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans;
        set<vector<int>> s;
        vector<int> temp;
        sort(nums.begin(),nums.end());
        find(s,temp,nums,0,nums.size()-1);
        for(auto i=s.begin();i!=s.end();i++) ans.push_back(*i);
        return ans;
    }
};

#Combination sum-1:

class Solution {
public:
    
    void find(vector<int> &nums, int start, int end,vector<vector<int>> &ans, int sum, int t,vector<int> &temp) {
        if(sum==t) {
            ans.push_back(temp);
            return;
        }
        if(sum>t) return;
        if(start>end) return;
        for(int i=start;i<=end;i++) {
            sum+=nums[i];
            temp.push_back(nums[i]);
            find(nums,i,end,ans,sum,t,temp);
            temp.pop_back();
            sum-=nums[i];
        }
    }
    
    vector<vector<int>> combinationSum(vector<int>& nums, int t) {
        sort(nums.begin(),nums.end());
        vector<int> temp;
        if(nums.size()<1) return  {};
        temp.push_back(nums[0]);
        for(int i=1;i<nums.size();i++) {
            if(nums[i]!=nums[i-1]) temp.push_back(nums[i]);
        }
        vector<vector<int>> ans;
        vector<int> k;
        find(temp,0,temp.size()-1,ans,0,t,k);;
        return ans;
    }
};

#Combination sum-2:

class Solution {
public:
    
    void find(vector<int> &nums, int start, int end,vector<vector<int>> &ans, int sum, int t,vector<int> &temp) {
        if(sum==t) {
            ans.push_back(temp);
            return;
        }
        if(sum>t || start>end) return;
        for(int i=start;i<=end;i++) {
            if(i>start && nums[i]==nums[i-1] ) continue; 
            sum+=nums[i];
            temp.push_back(nums[i]);
            find(nums,i+1,end,ans,sum,t,temp);
            temp.pop_back();
            sum-=nums[i];
        }
    }
    
    vector<vector<int>> combinationSum2(vector<int>& nums, int t) {
        vector<vector<int>> ans;
        vector<int> k;
        sort(nums.begin(),nums.end());
        find(nums,0,nums.size()-1,ans,0,t,k);
        return ans;
    }
};

#Palindrome Partitioning:

class Solution {
public:
    
    bool isPali(string s, int x, int y, int n) {
        if(y>n+1 || x<0) return false;
        while(x<=y) {
            if(s[x]!=s[y]) return false;
            x++;
            y--;
        }
        return true;
    }
    
    void find(vector<vector<string>> &ans, vector<string> &temp, string s, int start, int end) {
        if(start>end) {
            ans.push_back(temp);
            return;
        }
        
        for(int i=start;i<=end;i++) {
            string ss;
            int j=start;
            for(j=start;j<=i;j++) ss+=s[j];
            if(isPali(s,start,j-1,end)) {
                temp.push_back(ss);
                find(ans,temp,s,j,end);
                temp.pop_back();
            }
        }
    }
    
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        find(ans,temp,s,0,s.size()-1);
        return ans;
    }
};

#K-th permutation Sequence:

M1::
class Solution {
public:
    
    void func(vector<string> &ans, int start, int end, string s, int n) {
        if(start>=end) {
            ans.push_back(s);
            return;
        }
        
        for(int i=start;i<=end;i++) {
            swap(s[start],s[i]);
            func(ans,start+1,end,s,n-1);
            swap(s[start],s[i]);
        }
    }
    
    string getPermutation(int n, int k) {
        vector<string> ans;
        string s;
        for(int i=1;i<=n;i++) s+=(i+'0');
        func(ans,0,n-1,s,n);
        sort(ans.begin(),ans.end());
        //for(int i=0;i<ans.size();i++) cout<<ans[i]<<" ";
        return ans[k-1];
    }
};

M2::
class Solution {
public:
    string getPermutation(int n, int k) {
        long long int fact=1;
        for(int i=1;i<n;i++) fact*=i;
        string ans,temp;
        for(int i=1;i<=n;i++) temp+=(i+'0');
        k=k-1;
        while(1) {
            int a=k/fact;
            ans+=temp[a];
            temp.erase(temp.begin()+a);
            if(temp.size()==0) break;
            k=k-(a*fact);
            fact/=temp.size();
        }
        return ans;
    }
}