DAY::3

#Search in a 2d Matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size(), m=matrix[0].size();
        int r=0, c=m-1;
        while(r<n && c>=0) {
            if(matrix[r][c]==target) return true;
            if(matrix[r][c] > target) c--;
            else r++;
        }
        return false;
    }
};

#Pow(X,n)

M1::
class Solution {
public:
    double myPow(double x, int nn) {
        long double temp=1.0;
        long int sign = nn<0 ? -1 : 1;
        long int n=nn;
        if(n<0) n=-1*n;
        while(n) {
            if(n%2) {
                temp*=x;
                n--;
            } else {
                x = x*x;
                n/=2;
            }
        }
        if(sign < 0) temp = (double)1.0/temp;
        return temp;
    }
};

M2::
class Solution {
public:
    long double power(double x, long int n) {
        if(n==0) return 1;
        if(n==1) return x;
        long double temp = power(x,n/2);
        if(n%2) return x*temp*temp;
        else return temp*temp;
    }
    
    double myPow(double x, int n) {
        long int nn=n;
        int sign = 1;
        if(n<0) {
            sign = -1;
            nn = -1*nn;
        } 
        long double temp = power(x,nn);
        if(sign < 0 ) temp = (double)1.0/temp;
        return temp;
    }
};

#Majority Element (>N/2 times)

M1::
lass Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int>mp;
        int n=nums.size();
        int majNumber = (n+1)/2;
        for(int i=0;i<n;i++) {
            mp[nums[i]]++;
            if(mp[nums[i]]>=majNumber) return nums[i];
        }
        return -1;
    }
};

M2::
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        if(n==0) return 0;
        int majNumber =(n+1)/2,ans=1,curr=nums[0];
        for(int i=1;i<n;i++) {
            if(nums[i]==nums[i-1]) {
                ans++;
                if(ans==majNumber) return nums[i];
            } else {
                ans=1;
            }
        }
        return ans;
    }
};

M3::
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0, current;
        int n=nums.size();
        int majNumber=(n+1)/2;
        for(int i=0;i<n;i++) {
            if(count==0) {
                current=nums[i];
            }
            if(current!=nums[i]) {
                count--;
            } else count++;
        }
        return current;
    }
};

#Majority Element (>N/3 times)

#Grid Unique Paths

class Solution {
public:
    int uniquePaths(int m, int n) {
        int x=m+n-2;
        long long int ans=1,mini=min(m,n)-1;
        for(int i=1;i<=mini;i++) {
            ans*=(x); x--;
            ans/=i;
        }
        return ans;
    }
};

#Reverse Pairs (Leetcode)

class Solution {
public:
    int result=0;
    void mergeSort(vector<int>& nums, int start,int mid, int end, int &ans) {
        int l=mid-start+1, e=end-mid;
        int A[l], B[e],k=start;
        for(int i=0;i<l;i++) A[i]=nums[k++];
        for(int i=0;i<e;i++) B[i]=nums[k++];
        
        int x=0, y=0;
        k=start;
        int temp=0;
        for(int i=0;i<l;i++) {
            while(temp<e && A[i]> 2LL *B[temp]) {
                result+= (l-i);
                temp++;
            }
        }
        while(x<l && y<e) {
            if(A[x]<B[y]){
                nums[k]=A[x];
                x++;
            } else {
                nums[k]=B[y];
                y++;
            }
            k++;
        }
        
        while(x<l) {
            nums[k]=A[x];
            x++;
            k++;
        }
        
        while(y<e) {
            nums[k]=B[y];
            y++;
            k++;
        }
    }
    
    void merge(vector<int>& nums, int start, int end, int &ans) {
        if(start<end) {
            int mid = (start+end)/2;
            merge(nums,start,mid,ans);
            merge(nums,mid+1,end,ans);
            mergeSort(nums,start,mid,end,ans);
        }
    }
    
    int reversePairs(vector<int>& nums) {
        int ans=0, n=nums.size();
        result=0;
        merge(nums,0,n-1,ans);
        return result;
    }
};