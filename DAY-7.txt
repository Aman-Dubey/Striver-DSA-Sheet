DAY-7::

#Rotate a LinkedList:

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        ListNode *temp=head;
        if(!head) return head;
        int count=0;
        while(temp) {
            temp=temp->next;
            count++;
        }
        k=k%count;
        if(k==0) return head;
        count=count-k-1;
        temp=head;
        while(temp && count--) {
            temp=temp->next;
        }
        ListNode *next=temp->next,*ans=temp->next;
        temp->next=NULL;
        while(next->next) next=next->next;
        next->next=head;
        head=ans;
        return ans;
    }
};

#Clone a Linked List with random and next pointer:
M1::
class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node *temp=head,*ans=NULL,*t;
        map<Node*,Node*> mp;
        while(temp) {
            if(ans==NULL) {
                Node *n=new Node(temp->val);
                mp[temp]=n;
                ans=n;
                t=ans;
            } else {
                Node *n=new Node(temp->val);
                mp[temp]=n;
                t->next=n;
                t=t->next;
            }
            temp=temp->next;
        }
        
        temp=head;
        Node *tt=ans;
        while(temp) {
            tt->random=mp[temp->random];
            temp=temp->next;
            tt=tt->next;
        }
        return ans;
    }
};

M2::
class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node *temp=head;
        if(!head) return head;
        while(temp) {
            Node *t = new Node(temp->val);
            Node *next=temp->next;
            temp->next=t;
            t->next=next;
            temp=temp->next->next;
        }
        
        temp=head;
        while(temp && temp->next) {
            temp->next->random=temp->random==NULL ? NULL : temp->random->next;
            temp=temp->next->next;
        }
        temp=head;
        Node *ans=temp->next,*tt=NULL;
        while(temp && temp->next) {
            Node *t=temp->next;
            temp->next=temp->next->next;
            if(tt==NULL) {
                tt=t;
            } else {
                tt->next=t;
                tt=tt->next;
            }
            temp=temp->next;
        }
        return ans;
    }
};

#3 sum:

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        int n=nums.size();
        if(n<3) return ans;
        for(int i=0;i<n-2;i++) {
            int l=i+1, r=n-1;
            if(i>0 && nums[i]==nums[i-1]) continue;
            while(l<r)
            {
                int sum = nums[i]+nums[l]+nums[r];
                if(sum==0)
                {
                    vector<int> temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[l]);
                    temp.push_back(nums[r]);
                    ans.push_back(temp);
                    temp.clear();
                    l++;
                    while(l<r && nums[l]==nums[l-1]) l++;
                    
                } else if(sum < 0) l++;
                else r--;
            }
        }
        
        return ans;
    }
};

#Trapping rainwater:

class Solution {
public:
    int trap(vector<int>& h) {
        int n=h.size();
        if(n<=1) return 0;
        int A[n],B[n],ans=0;
        A[0]=h[0];
        B[n-1]=h[n-1];
        for(int i=1;i<n;i++) A[i]=max(A[i-1],h[i-1]);
        for(int i=n-2;i>=0;i--) B[i]=max(B[i+1],h[i+1]);
        for(int i=0;i<n;i++) ans+=(min(A[i],B[i])-h[i]>0 ? min(A[i],B[i])-h[i] : 0);
        return ans;
    }
};

#Remove Duplicate from Sorted array:

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size(),count=1;
        if(n<2) return n;
        for(int i=1;i<n;i++) {
            if(nums[count-1]!=nums[i]) {
                swap(nums[count],nums[i]);
                count++;
            }
        }
        return count;
    }
};

#Max consecutive ones:

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {
        int ans=0, n=nums.size();
        if(n==0) return 0;
        for(int i=0;i<n;i++) {
            if(nums[i]==0) nums[i]=0;
            else {
                nums[i]= i==0 ? 1 : nums[i-1]+1;
                ans=max(ans,nums[i]);
            }
        }
        return ans;
    }
};
