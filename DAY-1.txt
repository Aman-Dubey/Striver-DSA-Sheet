Striver Solutions::

#DAY: 1 =>

##Set Matrix Zeroes:

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        set<int> s,y;
        int n=matrix.size(), m=matrix[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++) {
                if(matrix[i][j]==0) {
                    s.insert(i);
                    y.insert(j);
                }
            }
        }
        for(auto i=s.begin();i!=s.end();i++) cout<<*i<<" ";
        for(int i=0;i<n;i++) {
            for(int j=0;j<m;j++) {
                if(s.find(i)!=s.end() || y.find(j)!=y.end()) matrix[i][j]=0;
            }
        }
        
        
    }
};

##Pascal’s Triangle:

class Solution {
public:
    vector<vector<int>> generate(int n) {
        vector<vector<int>> ans;
        ans.push_back({1});
        if(n==1) return ans;
        for(int i=1;i<n;i++) {
            vector<int> temp;
            temp.push_back(ans[i-1][0]);
            for(int j=1;j<ans[i-1].size();j++) {
                temp.push_back(ans[i-1][j-1]+ans[i-1][j]);
            }
            temp.push_back(ans[i-1][ans.size()-1]);
            ans.push_back(temp);
        }
        return ans;
    }
};

##Next Permutation:

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size(),x=-1;
        for(int i=n-2;i>=0;i--) {
            if(nums[i]<nums[i+1]) {
                x=i;
                break;
            }
        }
        if(x<0) {
            reverse(nums.begin(),nums.end());
            return;
        }
        int y=n-1;
        for(int i=n-1;i>x;i--) {
            if(nums[x]<nums[i]) {
                y=i;
                break;
            }
        }
        swap(nums[x],nums[y]);
        sort(nums.begin()+x+1,nums.end());
        
        
    }
};



##Kadane Algorithm:

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int ans=INT_MIN,temp=0;
        for(int i=0;i<nums.size();i++) {
            temp+=nums[i];
            if(temp<0) {
                ans=max(ans,temp);
                temp=0;
                continue;
            }
            
            ans=max(ans,temp);
        }
        return ans;
    }
};

##Sort an array of 0’s 1’s 2’s:

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int A[3];
        A[0]=A[1]=0;
        A[2]=0;
        for(int i=0;i<n;i++) A[nums[i]]++;
        int s=0;
        for(int i=0;i<A[0];i++){
            nums[i]=0;
            s=i+1;
        }
        for(int i=0;i<A[1];i++){
            nums[s+i]=1;
        }
        s=A[0]+A[1];
        for(int i=0;i<A[2];i++) nums[s+i]=2;
    }
};


##Stock buy and Sell:

class Solution {
public:
    int maxProfit(vector<int>& p) {
        int n=p.size();
        int A[n];
        int ans=0;
        if(n==1) return 0;
        A[n-1]=p[n-1];
        for(int i=n-2;i>=0;i--) {
            A[i]=max(p[i],A[i+1]);
            ans=max(ans,A[i+1]-p[i]);
        }
        return ans<0 ? 0: ans;
    }
};

OR

int maxProfit(int arr[]) {
  int maxPro = 0;
  int minPrice = INT_MAX;
  for (int i = 0; i < 6; i++) {
    minPrice = min(minPrice, arr[i]);
    maxPro = max(maxPro, arr[i] - minPrice);
  }
  return maxPro;
}